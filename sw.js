try{self["workbox:core:7.2.0"]&&_()}catch{}const O=(a,...e)=>{let t=a;return e.length>0&&(t+=` :: ${JSON.stringify(e)}`),t},I=O;class l extends Error{constructor(e,t){const s=I(e,t);super(s),this.name=e,this.details=t}}const f={googleAnalytics:"googleAnalytics",precache:"precache-v2",prefix:"workbox",runtime:"runtime",suffix:typeof registration<"u"?registration.scope:""},b=a=>[f.prefix,a,f.suffix].filter(e=>e&&e.length>0).join("-"),S=a=>{for(const e of Object.keys(f))a(e)},C={updateDetails:a=>{S(e=>{typeof a[e]=="string"&&(f[e]=a[e])})},getGoogleAnalyticsName:a=>a||b(f.googleAnalytics),getPrecacheName:a=>a||b(f.precache),getPrefix:()=>f.prefix,getRuntimeName:a=>a||b(f.runtime),getSuffix:()=>f.suffix};function T(a,e){const t=e();return a.waitUntil(t),t}try{self["workbox:precaching:7.2.0"]&&_()}catch{}const W="__WB_REVISION__";function M(a){if(!a)throw new l("add-to-cache-list-unexpected-type",{entry:a});if(typeof a=="string"){const c=new URL(a,location.href);return{cacheKey:c.href,url:c.href}}const{revision:e,url:t}=a;if(!t)throw new l("add-to-cache-list-unexpected-type",{entry:a});if(!e){const c=new URL(t,location.href);return{cacheKey:c.href,url:c.href}}const s=new URL(t,location.href),n=new URL(t,location.href);return s.searchParams.set(W,e),{cacheKey:s.href,url:n.href}}class A{constructor(){this.updatedURLs=[],this.notUpdatedURLs=[],this.handlerWillStart=async({request:e,state:t})=>{t&&(t.originalRequest=e)},this.cachedResponseWillBeUsed=async({event:e,state:t,cachedResponse:s})=>{if(e.type==="install"&&t&&t.originalRequest&&t.originalRequest instanceof Request){const n=t.originalRequest.url;s?this.notUpdatedURLs.push(n):this.updatedURLs.push(n)}return s}}}class D{constructor({precacheController:e}){this.cacheKeyWillBeUsed=async({request:t,params:s})=>{const n=(s==null?void 0:s.cacheKey)||this._precacheController.getCacheKeyForURL(t.url);return n?new Request(n,{headers:t.headers}):t},this._precacheController=e}}let p;function j(){if(p===void 0){const a=new Response("");if("body"in a)try{new Response(a.body),p=!0}catch{p=!1}p=!1}return p}async function F(a,e){let t=null;if(a.url&&(t=new URL(a.url).origin),t!==self.location.origin)throw new l("cross-origin-copy-response",{origin:t});const s=a.clone(),c={headers:new Headers(s.headers),status:s.status,statusText:s.statusText},r=j()?s.body:await s.blob();return new Response(r,c)}const H=a=>new URL(String(a),location.href).href.replace(new RegExp(`^${location.origin}`),"");function N(a,e){const t=new URL(a);for(const s of e)t.searchParams.delete(s);return t.href}async function q(a,e,t,s){const n=N(e.url,t);if(e.url===n)return a.match(e,s);const c=Object.assign(Object.assign({},s),{ignoreSearch:!0}),r=await a.keys(e,c);for(const i of r){const o=N(i.url,t);if(n===o)return a.match(i,s)}}class B{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}const $=new Set;async function G(){for(const a of $)await a()}function V(a){return new Promise(e=>setTimeout(e,a))}try{self["workbox:strategies:7.2.0"]&&_()}catch{}function m(a){return typeof a=="string"?new Request(a):a}class J{constructor(e,t){this._cacheKeys={},Object.assign(this,t),this.event=t.event,this._strategy=e,this._handlerDeferred=new B,this._extendLifetimePromises=[],this._plugins=[...e.plugins],this._pluginStateMap=new Map;for(const s of this._plugins)this._pluginStateMap.set(s,{});this.event.waitUntil(this._handlerDeferred.promise)}async fetch(e){const{event:t}=this;let s=m(e);if(s.mode==="navigate"&&t instanceof FetchEvent&&t.preloadResponse){const r=await t.preloadResponse;if(r)return r}const n=this.hasCallback("fetchDidFail")?s.clone():null;try{for(const r of this.iterateCallbacks("requestWillFetch"))s=await r({request:s.clone(),event:t})}catch(r){if(r instanceof Error)throw new l("plugin-error-request-will-fetch",{thrownErrorMessage:r.message})}const c=s.clone();try{let r;r=await fetch(s,s.mode==="navigate"?void 0:this._strategy.fetchOptions);for(const i of this.iterateCallbacks("fetchDidSucceed"))r=await i({event:t,request:c,response:r});return r}catch(r){throw n&&await this.runCallbacks("fetchDidFail",{error:r,event:t,originalRequest:n.clone(),request:c.clone()}),r}}async fetchAndCachePut(e){const t=await this.fetch(e),s=t.clone();return this.waitUntil(this.cachePut(e,s)),t}async cacheMatch(e){const t=m(e);let s;const{cacheName:n,matchOptions:c}=this._strategy,r=await this.getCacheKey(t,"read"),i=Object.assign(Object.assign({},c),{cacheName:n});s=await caches.match(r,i);for(const o of this.iterateCallbacks("cachedResponseWillBeUsed"))s=await o({cacheName:n,matchOptions:c,cachedResponse:s,request:r,event:this.event})||void 0;return s}async cachePut(e,t){const s=m(e);await V(0);const n=await this.getCacheKey(s,"write");if(!t)throw new l("cache-put-with-no-response",{url:H(n.url)});const c=await this._ensureResponseSafeToCache(t);if(!c)return!1;const{cacheName:r,matchOptions:i}=this._strategy,o=await self.caches.open(r),h=this.hasCallback("cacheDidUpdate"),g=h?await q(o,n.clone(),["__WB_REVISION__"],i):null;try{await o.put(n,h?c.clone():c)}catch(u){if(u instanceof Error)throw u.name==="QuotaExceededError"&&await G(),u}for(const u of this.iterateCallbacks("cacheDidUpdate"))await u({cacheName:r,oldResponse:g,newResponse:c.clone(),request:n,event:this.event});return!0}async getCacheKey(e,t){const s=`${e.url} | ${t}`;if(!this._cacheKeys[s]){let n=e;for(const c of this.iterateCallbacks("cacheKeyWillBeUsed"))n=m(await c({mode:t,request:n,event:this.event,params:this.params}));this._cacheKeys[s]=n}return this._cacheKeys[s]}hasCallback(e){for(const t of this._strategy.plugins)if(e in t)return!0;return!1}async runCallbacks(e,t){for(const s of this.iterateCallbacks(e))await s(t)}*iterateCallbacks(e){for(const t of this._strategy.plugins)if(typeof t[e]=="function"){const s=this._pluginStateMap.get(t);yield c=>{const r=Object.assign(Object.assign({},c),{state:s});return t[e](r)}}}waitUntil(e){return this._extendLifetimePromises.push(e),e}async doneWaiting(){let e;for(;e=this._extendLifetimePromises.shift();)await e}destroy(){this._handlerDeferred.resolve(null)}async _ensureResponseSafeToCache(e){let t=e,s=!1;for(const n of this.iterateCallbacks("cacheWillUpdate"))if(t=await n({request:this.request,response:t,event:this.event})||void 0,s=!0,!t)break;return s||t&&t.status!==200&&(t=void 0),t}}class k{constructor(e={}){this.cacheName=C.getRuntimeName(e.cacheName),this.plugins=e.plugins||[],this.fetchOptions=e.fetchOptions,this.matchOptions=e.matchOptions}handle(e){const[t]=this.handleAll(e);return t}handleAll(e){e instanceof FetchEvent&&(e={event:e,request:e.request});const t=e.event,s=typeof e.request=="string"?new Request(e.request):e.request,n="params"in e?e.params:void 0,c=new J(this,{event:t,request:s,params:n}),r=this._getResponse(c,s,t),i=this._awaitComplete(r,c,s,t);return[r,i]}async _getResponse(e,t,s){await e.runCallbacks("handlerWillStart",{event:s,request:t});let n;try{if(n=await this._handle(t,e),!n||n.type==="error")throw new l("no-response",{url:t.url})}catch(c){if(c instanceof Error){for(const r of e.iterateCallbacks("handlerDidError"))if(n=await r({error:c,event:s,request:t}),n)break}if(!n)throw c}for(const c of e.iterateCallbacks("handlerWillRespond"))n=await c({event:s,request:t,response:n});return n}async _awaitComplete(e,t,s,n){let c,r;try{c=await e}catch{}try{await t.runCallbacks("handlerDidRespond",{event:n,request:s,response:c}),await t.doneWaiting()}catch(i){i instanceof Error&&(r=i)}if(await t.runCallbacks("handlerDidComplete",{event:n,request:s,response:c,error:r}),t.destroy(),r)throw r}}class d extends k{constructor(e={}){e.cacheName=C.getPrecacheName(e.cacheName),super(e),this._fallbackToNetwork=e.fallbackToNetwork!==!1,this.plugins.push(d.copyRedirectedCacheableResponsesPlugin)}async _handle(e,t){const s=await t.cacheMatch(e);return s||(t.event&&t.event.type==="install"?await this._handleInstall(e,t):await this._handleFetch(e,t))}async _handleFetch(e,t){let s;const n=t.params||{};if(this._fallbackToNetwork){const c=n.integrity,r=e.integrity,i=!r||r===c;s=await t.fetch(new Request(e,{integrity:e.mode!=="no-cors"?r||c:void 0})),c&&i&&e.mode!=="no-cors"&&(this._useDefaultCacheabilityPluginIfNeeded(),await t.cachePut(e,s.clone()))}else throw new l("missing-precache-entry",{cacheName:this.cacheName,url:e.url});return s}async _handleInstall(e,t){this._useDefaultCacheabilityPluginIfNeeded();const s=await t.fetch(e);if(!await t.cachePut(e,s.clone()))throw new l("bad-precaching-response",{url:e.url,status:s.status});return s}_useDefaultCacheabilityPluginIfNeeded(){let e=null,t=0;for(const[s,n]of this.plugins.entries())n!==d.copyRedirectedCacheableResponsesPlugin&&(n===d.defaultPrecacheCacheabilityPlugin&&(e=s),n.cacheWillUpdate&&t++);t===0?this.plugins.push(d.defaultPrecacheCacheabilityPlugin):t>1&&e!==null&&this.plugins.splice(e,1)}}d.defaultPrecacheCacheabilityPlugin={async cacheWillUpdate({response:a}){return!a||a.status>=400?null:a}};d.copyRedirectedCacheableResponsesPlugin={async cacheWillUpdate({response:a}){return a.redirected?await F(a):a}};class Q{constructor({cacheName:e,plugins:t=[],fallbackToNetwork:s=!0}={}){this._urlsToCacheKeys=new Map,this._urlsToCacheModes=new Map,this._cacheKeysToIntegrities=new Map,this._strategy=new d({cacheName:C.getPrecacheName(e),plugins:[...t,new D({precacheController:this})],fallbackToNetwork:s}),this.install=this.install.bind(this),this.activate=this.activate.bind(this)}get strategy(){return this._strategy}precache(e){this.addToCacheList(e),this._installAndActiveListenersAdded||(self.addEventListener("install",this.install),self.addEventListener("activate",this.activate),this._installAndActiveListenersAdded=!0)}addToCacheList(e){const t=[];for(const s of e){typeof s=="string"?t.push(s):s&&s.revision===void 0&&t.push(s.url);const{cacheKey:n,url:c}=M(s),r=typeof s!="string"&&s.revision?"reload":"default";if(this._urlsToCacheKeys.has(c)&&this._urlsToCacheKeys.get(c)!==n)throw new l("add-to-cache-list-conflicting-entries",{firstEntry:this._urlsToCacheKeys.get(c),secondEntry:n});if(typeof s!="string"&&s.integrity){if(this._cacheKeysToIntegrities.has(n)&&this._cacheKeysToIntegrities.get(n)!==s.integrity)throw new l("add-to-cache-list-conflicting-integrities",{url:c});this._cacheKeysToIntegrities.set(n,s.integrity)}if(this._urlsToCacheKeys.set(c,n),this._urlsToCacheModes.set(c,r),t.length>0){const i=`Workbox is precaching URLs without revision info: ${t.join(", ")}
This is generally NOT safe. Learn more at https://bit.ly/wb-precache`;console.warn(i)}}}install(e){return T(e,async()=>{const t=new A;this.strategy.plugins.push(t);for(const[c,r]of this._urlsToCacheKeys){const i=this._cacheKeysToIntegrities.get(r),o=this._urlsToCacheModes.get(c),h=new Request(c,{integrity:i,cache:o,credentials:"same-origin"});await Promise.all(this.strategy.handleAll({params:{cacheKey:r},request:h,event:e}))}const{updatedURLs:s,notUpdatedURLs:n}=t;return{updatedURLs:s,notUpdatedURLs:n}})}activate(e){return T(e,async()=>{const t=await self.caches.open(this.strategy.cacheName),s=await t.keys(),n=new Set(this._urlsToCacheKeys.values()),c=[];for(const r of s)n.has(r.url)||(await t.delete(r),c.push(r.url));return{deletedURLs:c}})}getURLsToCacheKeys(){return this._urlsToCacheKeys}getCachedURLs(){return[...this._urlsToCacheKeys.keys()]}getCacheKeyForURL(e){const t=new URL(e,location.href);return this._urlsToCacheKeys.get(t.href)}getIntegrityForCacheKey(e){return this._cacheKeysToIntegrities.get(e)}async matchPrecache(e){const t=e instanceof Request?e.url:e,s=this.getCacheKeyForURL(t);if(s)return(await self.caches.open(this.strategy.cacheName)).match(s)}createHandlerBoundToURL(e){const t=this.getCacheKeyForURL(e);if(!t)throw new l("non-precached-url",{url:e});return s=>(s.request=new Request(e),s.params=Object.assign({cacheKey:t},s.params),this.strategy.handle(s))}}let U;const v=()=>(U||(U=new Q),U);try{self["workbox:routing:7.2.0"]&&_()}catch{}const K="GET",R=a=>a&&typeof a=="object"?a:{handle:a};class y{constructor(e,t,s=K){this.handler=R(t),this.match=e,this.method=s}setCatchHandler(e){this.catchHandler=R(e)}}class z extends y{constructor(e,t,s){const n=({url:c})=>{const r=e.exec(c.href);if(r&&!(c.origin!==location.origin&&r.index!==0))return r.slice(1)};super(n,t,s)}}class X{constructor(){this._routes=new Map,this._defaultHandlerMap=new Map}get routes(){return this._routes}addFetchListener(){self.addEventListener("fetch",e=>{const{request:t}=e,s=this.handleRequest({request:t,event:e});s&&e.respondWith(s)})}addCacheListener(){self.addEventListener("message",e=>{if(e.data&&e.data.type==="CACHE_URLS"){const{payload:t}=e.data,s=Promise.all(t.urlsToCache.map(n=>{typeof n=="string"&&(n=[n]);const c=new Request(...n);return this.handleRequest({request:c,event:e})}));e.waitUntil(s),e.ports&&e.ports[0]&&s.then(()=>e.ports[0].postMessage(!0))}})}handleRequest({request:e,event:t}){const s=new URL(e.url,location.href);if(!s.protocol.startsWith("http"))return;const n=s.origin===location.origin,{params:c,route:r}=this.findMatchingRoute({event:t,request:e,sameOrigin:n,url:s});let i=r&&r.handler;const o=e.method;if(!i&&this._defaultHandlerMap.has(o)&&(i=this._defaultHandlerMap.get(o)),!i)return;let h;try{h=i.handle({url:s,request:e,event:t,params:c})}catch(u){h=Promise.reject(u)}const g=r&&r.catchHandler;return h instanceof Promise&&(this._catchHandler||g)&&(h=h.catch(async u=>{if(g)try{return await g.handle({url:s,request:e,event:t,params:c})}catch(P){P instanceof Error&&(u=P)}if(this._catchHandler)return this._catchHandler.handle({url:s,request:e,event:t});throw u})),h}findMatchingRoute({url:e,sameOrigin:t,request:s,event:n}){const c=this._routes.get(s.method)||[];for(const r of c){let i;const o=r.match({url:e,sameOrigin:t,request:s,event:n});if(o)return i=o,(Array.isArray(i)&&i.length===0||o.constructor===Object&&Object.keys(o).length===0||typeof o=="boolean")&&(i=void 0),{route:r,params:i}}return{}}setDefaultHandler(e,t=K){this._defaultHandlerMap.set(t,R(e))}setCatchHandler(e){this._catchHandler=R(e)}registerRoute(e){this._routes.has(e.method)||this._routes.set(e.method,[]),this._routes.get(e.method).push(e)}unregisterRoute(e){if(!this._routes.has(e.method))throw new l("unregister-route-but-not-found-with-method",{method:e.method});const t=this._routes.get(e.method).indexOf(e);if(t>-1)this._routes.get(e.method).splice(t,1);else throw new l("unregister-route-route-not-registered")}}let w;const E=()=>(w||(w=new X,w.addFetchListener(),w.addCacheListener()),w);function L(a,e,t){let s;if(typeof a=="string"){const c=new URL(a,location.href),r=({url:i})=>i.href===c.href;s=new y(r,e,t)}else if(a instanceof RegExp)s=new z(a,e,t);else if(typeof a=="function")s=new y(a,e,t);else if(a instanceof y)s=a;else throw new l("unsupported-route-type",{moduleName:"workbox-routing",funcName:"registerRoute",paramName:"capture"});return E().registerRoute(s),s}function Y(a,e=[]){for(const t of[...a.searchParams.keys()])e.some(s=>s.test(t))&&a.searchParams.delete(t);return a}function*Z(a,{ignoreURLParametersMatching:e=[/^utm_/,/^fbclid$/],directoryIndex:t="index.html",cleanURLs:s=!0,urlManipulation:n}={}){const c=new URL(a,location.href);c.hash="",yield c.href;const r=Y(c,e);if(yield r.href,t&&r.pathname.endsWith("/")){const i=new URL(r.href);i.pathname+=t,yield i.href}if(s){const i=new URL(r.href);i.pathname+=".html",yield i.href}if(n){const i=n({url:c});for(const o of i)yield o.href}}class ee extends y{constructor(e,t){const s=({request:n})=>{const c=e.getURLsToCacheKeys();for(const r of Z(n.url,t)){const i=c.get(r);if(i){const o=e.getIntegrityForCacheKey(i);return{cacheKey:i,integrity:o}}}};super(s,e.strategy)}}function te(a){const e=v(),t=new ee(e,a);L(t)}const se="-precache-",ae=async(a,e=se)=>{const s=(await self.caches.keys()).filter(n=>n.includes(e)&&n.includes(self.registration.scope)&&n!==a);return await Promise.all(s.map(n=>self.caches.delete(n))),s};function ne(){self.addEventListener("activate",a=>{const e=C.getPrecacheName();a.waitUntil(ae(e).then(t=>{}))})}function re(a){v().precache(a)}function ce(a,e){re(a),te(e)}function ie(){self.addEventListener("activate",()=>self.clients.claim())}function oe(a){E().setCatchHandler(a)}const x={cacheWillUpdate:async({response:a})=>a.status===200||a.status===0?a:null};class le extends k{constructor(e={}){super(e),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(x),this._networkTimeoutSeconds=e.networkTimeoutSeconds||0}async _handle(e,t){const s=[],n=[];let c;if(this._networkTimeoutSeconds){const{id:o,promise:h}=this._getTimeoutPromise({request:e,logs:s,handler:t});c=o,n.push(h)}const r=this._getNetworkPromise({timeoutId:c,request:e,logs:s,handler:t});n.push(r);const i=await t.waitUntil((async()=>await t.waitUntil(Promise.race(n))||await r)());if(!i)throw new l("no-response",{url:e.url});return i}_getTimeoutPromise({request:e,logs:t,handler:s}){let n;return{promise:new Promise(r=>{n=setTimeout(async()=>{r(await s.cacheMatch(e))},this._networkTimeoutSeconds*1e3)}),id:n}}async _getNetworkPromise({timeoutId:e,request:t,logs:s,handler:n}){let c,r;try{r=await n.fetchAndCachePut(t)}catch(i){i instanceof Error&&(c=i)}return e&&clearTimeout(e),(c||!r)&&(r=await n.cacheMatch(t)),r}}class he extends k{constructor(e={}){super(e),this.plugins.some(t=>"cacheWillUpdate"in t)||this.plugins.unshift(x)}async _handle(e,t){const s=t.fetchAndCachePut(e).catch(()=>{});t.waitUntil(s);let n=await t.cacheMatch(e),c;if(!n)try{n=await s}catch(r){r instanceof Error&&(c=r)}if(!n)throw new l("no-response",{url:e.url,error:c});return n}}ne();importScripts("./onesignal.sw.js");ce([{"revision":null,"url":"assets/index-C_Q7gl4P.css"},{"revision":null,"url":"assets/index-DbudiUAp.js"},{"revision":"a844a3de1f4d1154e898479b2bd8801b","url":"index.html"},{"revision":"81baaba1d860ef36c43eb803c3f80bea","url":"onesignal.sw.js"},{"revision":"358a329cdbec03e9cb561f71d1678431","url":"registerSW.js"},{"revision":"d0e8a7ea23d73165fbb23d86999f115e","url":"assets/icons/android/maskable_icon.png"},{"revision":"822d7939e46e19512f7c3c05fd2f2ce4","url":"assets/icons/android/maskable_icon_x128.png"},{"revision":"3cc5f248e1fc825b5018c52834436a35","url":"assets/icons/android/maskable_icon_x192.png"},{"revision":"7ffa6746c941a9f2537da516ea563db6","url":"assets/icons/android/maskable_icon_x384.png"},{"revision":"d722ae0576d7672770fc2b590a72aa54","url":"assets/icons/android/maskable_icon_x48.png"},{"revision":"241a34361b91271bd69db2f75afa4c50","url":"assets/icons/android/maskable_icon_x512.png"},{"revision":"2cdeb9bb687118a48a895ad3f8257cb7","url":"assets/icons/android/maskable_icon_x72.png"},{"revision":"15a24e4f36890c8da5063ebaf62e73fa","url":"assets/icons/android/maskable_icon_x96.png"},{"revision":"8d82ee1bf5fb00745b2d563969c31e28","url":"assets/icons/ios/100.png"},{"revision":"968b8f8e5dc55f852620d7cf3921dc80","url":"assets/icons/ios/1024.png"},{"revision":"8f6be721834db895bd8fea4981d5e64c","url":"assets/icons/ios/114.png"},{"revision":"5f31e9a7a2d9de77e608ee210d7b8181","url":"assets/icons/ios/120.png"},{"revision":"03ede82a181eb618918632a767c7d1ae","url":"assets/icons/ios/128.png"},{"revision":"3acf316cfa74ef252b15e24cf89e5196","url":"assets/icons/ios/144.png"},{"revision":"75226ff9ee986f5c29241daac62fd7cd","url":"assets/icons/ios/152.png"},{"revision":"a406604fae4c87374a3a63233b6de3de","url":"assets/icons/ios/16.png"},{"revision":"55a19edcdfd5112f13c208d8aa21d2ee","url":"assets/icons/ios/167.png"},{"revision":"dda9cd511f01bad958f38a18e06071b2","url":"assets/icons/ios/180.png"},{"revision":"4b860f60afc38ded06368d2126083ebf","url":"assets/icons/ios/192.png"},{"revision":"d99398888194ec2c74e7d3af6f1ecb32","url":"assets/icons/ios/20.png"},{"revision":"3c806f3a6542e2e979bcb4679e53ad3b","url":"assets/icons/ios/256.png"},{"revision":"e84352712315be9a514df9b7045151e3","url":"assets/icons/ios/29.png"},{"revision":"32a1f7ba6abb522cf61928d10f1af64f","url":"assets/icons/ios/32.png"},{"revision":"6ac0000514d11d21bedbe2515b2ad264","url":"assets/icons/ios/40.png"},{"revision":"6dc1b3e7a7b84eed688d0222b0355b88","url":"assets/icons/ios/50.png"},{"revision":"2c774dbe226051b48a3e972bdcd2a113","url":"assets/icons/ios/512.png"},{"revision":"a5d37a9a0911a92e94f79a8c5e788974","url":"assets/icons/ios/57.png"},{"revision":"3e913d08f155372d97e6b19f5082fc3b","url":"assets/icons/ios/58.png"},{"revision":"5cc1a7b140e36a42f8ba1cca982d6d93","url":"assets/icons/ios/60.png"},{"revision":"fb4f99f37034f7f7b1a28bb962b4f775","url":"assets/icons/ios/64.png"},{"revision":"0d945aae527def4cda15e9448070f107","url":"assets/icons/ios/72.png"},{"revision":"265ec251e40c34acf065808c8d2f9426","url":"assets/icons/ios/76.png"},{"revision":"ec55c6cebba380318117ba2ea34de8c5","url":"assets/icons/ios/80.png"},{"revision":"45e55cc691a722666cbdb67780f3009b","url":"assets/icons/ios/87.png"},{"revision":"2f3daf643972aad53af62307bb3a82dd","url":"assets/icons/windows11/LargeTile.scale-100.png"},{"revision":"b18c1687d2e57e21ced5f0556460955b","url":"assets/icons/windows11/LargeTile.scale-125.png"},{"revision":"5d0c673b33b53420cb1c38d63e23881c","url":"assets/icons/windows11/LargeTile.scale-150.png"},{"revision":"bcc1f37ee663d3806fe7415ba2f87c67","url":"assets/icons/windows11/LargeTile.scale-200.png"},{"revision":"5825717fb563db9601fa53b7d3db520d","url":"assets/icons/windows11/LargeTile.scale-400.png"},{"revision":"814df1b559f11374ceb92b9860108313","url":"assets/icons/windows11/SmallTile.scale-100.png"},{"revision":"d179a588c8a5c45c3c8434edf9f0a4b8","url":"assets/icons/windows11/SmallTile.scale-125.png"},{"revision":"914dccd15874121902d404043df4d605","url":"assets/icons/windows11/SmallTile.scale-150.png"},{"revision":"6a742bca91c727a4a0e0fb284d35e1e9","url":"assets/icons/windows11/SmallTile.scale-200.png"},{"revision":"74571db543c0b13acaadce8ea4473291","url":"assets/icons/windows11/SmallTile.scale-400.png"},{"revision":"be6224ba5efe5df6d22bf51816e4554e","url":"assets/icons/windows11/SplashScreen.scale-100.png"},{"revision":"50313ee0c824729941406422f6cd4374","url":"assets/icons/windows11/SplashScreen.scale-125.png"},{"revision":"24a7d21101b5862c60d25217cde409b9","url":"assets/icons/windows11/SplashScreen.scale-150.png"},{"revision":"338083f649a2d86c04a0a7485c366468","url":"assets/icons/windows11/SplashScreen.scale-200.png"},{"revision":"94a71957e41f31f3a58eef4a52de7afc","url":"assets/icons/windows11/SplashScreen.scale-400.png"},{"revision":"098bfe480b595d0ea5c971cc0474c184","url":"assets/icons/windows11/Square150x150Logo.scale-100.png"},{"revision":"a68d9bc202d9cdc6830669f8328734e4","url":"assets/icons/windows11/Square150x150Logo.scale-125.png"},{"revision":"3ac9016f2d23e81149b45e7dc60d71eb","url":"assets/icons/windows11/Square150x150Logo.scale-150.png"},{"revision":"ec685200395ea9fd35057d347162e1ab","url":"assets/icons/windows11/Square150x150Logo.scale-200.png"},{"revision":"c637156721e3a406811e9085f5de300f","url":"assets/icons/windows11/Square150x150Logo.scale-400.png"},{"revision":"a406604fae4c87374a3a63233b6de3de","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-16.png"},{"revision":"d99398888194ec2c74e7d3af6f1ecb32","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-20.png"},{"revision":"7ac3d61ce2fb87436bebd76e618e1d69","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-24.png"},{"revision":"3c806f3a6542e2e979bcb4679e53ad3b","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-256.png"},{"revision":"461a0255676eec9daee61e1d3b5ef8d7","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-30.png"},{"revision":"32a1f7ba6abb522cf61928d10f1af64f","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-32.png"},{"revision":"f601159c362668bbd6cf6d9528a49fdc","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-36.png"},{"revision":"6ac0000514d11d21bedbe2515b2ad264","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-40.png"},{"revision":"1db18daaa68c608f69dab2ae4efe5dd6","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-44.png"},{"revision":"b3c98017f6b155c06d5b9da8ee174cfd","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-48.png"},{"revision":"5cc1a7b140e36a42f8ba1cca982d6d93","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-60.png"},{"revision":"fb4f99f37034f7f7b1a28bb962b4f775","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-64.png"},{"revision":"0d945aae527def4cda15e9448070f107","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-72.png"},{"revision":"ec55c6cebba380318117ba2ea34de8c5","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-80.png"},{"revision":"9f7abb5b71b32920992f3a300e6b8693","url":"assets/icons/windows11/Square44x44Logo.altform-lightunplated_targetsize-96.png"},{"revision":"a406604fae4c87374a3a63233b6de3de","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-16.png"},{"revision":"d99398888194ec2c74e7d3af6f1ecb32","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-20.png"},{"revision":"7ac3d61ce2fb87436bebd76e618e1d69","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-24.png"},{"revision":"3c806f3a6542e2e979bcb4679e53ad3b","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-256.png"},{"revision":"461a0255676eec9daee61e1d3b5ef8d7","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-30.png"},{"revision":"32a1f7ba6abb522cf61928d10f1af64f","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-32.png"},{"revision":"f601159c362668bbd6cf6d9528a49fdc","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-36.png"},{"revision":"6ac0000514d11d21bedbe2515b2ad264","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-40.png"},{"revision":"1db18daaa68c608f69dab2ae4efe5dd6","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-44.png"},{"revision":"b3c98017f6b155c06d5b9da8ee174cfd","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-48.png"},{"revision":"5cc1a7b140e36a42f8ba1cca982d6d93","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-60.png"},{"revision":"fb4f99f37034f7f7b1a28bb962b4f775","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-64.png"},{"revision":"0d945aae527def4cda15e9448070f107","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-72.png"},{"revision":"ec55c6cebba380318117ba2ea34de8c5","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-80.png"},{"revision":"9f7abb5b71b32920992f3a300e6b8693","url":"assets/icons/windows11/Square44x44Logo.altform-unplated_targetsize-96.png"},{"revision":"1db18daaa68c608f69dab2ae4efe5dd6","url":"assets/icons/windows11/Square44x44Logo.scale-100.png"},{"revision":"96cb4633b7944dfa99a750f28b2446c7","url":"assets/icons/windows11/Square44x44Logo.scale-125.png"},{"revision":"cab863de24aeafbdaa307598522f9c36","url":"assets/icons/windows11/Square44x44Logo.scale-150.png"},{"revision":"83e69e97566bd41c2a5f7f18aca39d02","url":"assets/icons/windows11/Square44x44Logo.scale-200.png"},{"revision":"06f733ae8c0fdb53e7b461eae1de9904","url":"assets/icons/windows11/Square44x44Logo.scale-400.png"},{"revision":"a406604fae4c87374a3a63233b6de3de","url":"assets/icons/windows11/Square44x44Logo.targetsize-16.png"},{"revision":"d99398888194ec2c74e7d3af6f1ecb32","url":"assets/icons/windows11/Square44x44Logo.targetsize-20.png"},{"revision":"7ac3d61ce2fb87436bebd76e618e1d69","url":"assets/icons/windows11/Square44x44Logo.targetsize-24.png"},{"revision":"3c806f3a6542e2e979bcb4679e53ad3b","url":"assets/icons/windows11/Square44x44Logo.targetsize-256.png"},{"revision":"461a0255676eec9daee61e1d3b5ef8d7","url":"assets/icons/windows11/Square44x44Logo.targetsize-30.png"},{"revision":"32a1f7ba6abb522cf61928d10f1af64f","url":"assets/icons/windows11/Square44x44Logo.targetsize-32.png"},{"revision":"f601159c362668bbd6cf6d9528a49fdc","url":"assets/icons/windows11/Square44x44Logo.targetsize-36.png"},{"revision":"6ac0000514d11d21bedbe2515b2ad264","url":"assets/icons/windows11/Square44x44Logo.targetsize-40.png"},{"revision":"1db18daaa68c608f69dab2ae4efe5dd6","url":"assets/icons/windows11/Square44x44Logo.targetsize-44.png"},{"revision":"b3c98017f6b155c06d5b9da8ee174cfd","url":"assets/icons/windows11/Square44x44Logo.targetsize-48.png"},{"revision":"5cc1a7b140e36a42f8ba1cca982d6d93","url":"assets/icons/windows11/Square44x44Logo.targetsize-60.png"},{"revision":"fb4f99f37034f7f7b1a28bb962b4f775","url":"assets/icons/windows11/Square44x44Logo.targetsize-64.png"},{"revision":"0d945aae527def4cda15e9448070f107","url":"assets/icons/windows11/Square44x44Logo.targetsize-72.png"},{"revision":"ec55c6cebba380318117ba2ea34de8c5","url":"assets/icons/windows11/Square44x44Logo.targetsize-80.png"},{"revision":"9f7abb5b71b32920992f3a300e6b8693","url":"assets/icons/windows11/Square44x44Logo.targetsize-96.png"},{"revision":"f8c88248a339fbb154ca3fd9e77fb77c","url":"assets/icons/windows11/StoreLogo.scale-100.png"},{"revision":"28fa84742f8e31576651854f0ef4cff8","url":"assets/icons/windows11/StoreLogo.scale-125.png"},{"revision":"4e8c2281d32a6e840960e96523742999","url":"assets/icons/windows11/StoreLogo.scale-150.png"},{"revision":"b92153e94060269e8a14ac8ef876811e","url":"assets/icons/windows11/StoreLogo.scale-200.png"},{"revision":"939642b9d8755af426253e417408b4a3","url":"assets/icons/windows11/StoreLogo.scale-400.png"},{"revision":"bad10eb84986324dd17f6a579170db43","url":"assets/icons/windows11/Wide310x150Logo.scale-100.png"},{"revision":"8db4baa68ca9c62a9d8ca7c14c35a070","url":"assets/icons/windows11/Wide310x150Logo.scale-125.png"},{"revision":"7e95fe78a62ed6ae1a1d25ca008f7561","url":"assets/icons/windows11/Wide310x150Logo.scale-150.png"},{"revision":"be6224ba5efe5df6d22bf51816e4554e","url":"assets/icons/windows11/Wide310x150Logo.scale-200.png"},{"revision":"338083f649a2d86c04a0a7485c366468","url":"assets/icons/windows11/Wide310x150Logo.scale-400.png"},{"revision":"3fe3250e137657e7419bf52f7b89b4f5","url":"manifest.webmanifest"}]);L(({request:a})=>a.destination==="script"||a.destination==="style",new he({cacheName:"static-resources"}));L(({request:a})=>a.destination==="document",new le({cacheName:"html-pages"}));oe(async({request:a,url:e})=>{if(console.log(a,e),a.destination==="document"){const t=await caches.match(e);if(console.log(t),t)return t}return Response.error()});self.addEventListener("install",a=>{console.log("SW INSTALLED",a)});self.addEventListener("offline",a=>{console.log("SW OFFLINE",a)});self.addEventListener("online",a=>{console.log("SW ONLINE",a)});self.addEventListener("fetch",async a=>{console.log(a.request.destination,a.request.url);try{const e=await fetch(a.request),t=await e.json();if(e.ok)a.respondWith(new Response(t));else throw new Error("HTTP Error")}catch(e){console.log(e),a.respondWith(new Response(JSON.stringify({success:!1}),{status:500}))}});self.skipWaiting();ie();
